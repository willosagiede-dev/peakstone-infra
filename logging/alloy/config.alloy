logging {
  level  = "info"
  format = "logfmt"
}

discovery.docker "docker_local" {
  host             = "unix:///var/run/docker.sock"
  refresh_interval = "10s"
}

discovery.relabel "logs_select_and_normalize" {
  targets = discovery.docker.docker_local.targets

  rule {
    action        = "keep"
    source_labels = ["__meta_docker_container_label_logging"]
    regex         = "alloy"
  }

  rule {
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container"
    regex         = "/(.*)"
    replacement   = "$1"
  }

  rule {
    source_labels = ["__meta_docker_container_label_service"]
    target_label  = "service"
  }

  rule {
    source_labels = ["__meta_docker_container_label_env"]
    target_label  = "env"
  }

  rule {
    source_labels = ["__meta_docker_container_label_org"]
    target_label  = "org"
  }

  rule {
    source_labels = ["__meta_docker_container_log_stream"]
    target_label  = "stream"
  }
}

loki.source.docker "containers" {
  host             = "unix:///var/run/docker.sock"
  targets          = discovery.relabel.logs_select_and_normalize.output
  relabel_rules    = discovery.relabel.logs_select_and_normalize.rules
  refresh_interval = "10s"
  forward_to       = [loki.process.main.receiver]
}

loki.process "main" {
  stage.docker {}

  stage.match {
    selector = "{service=\"storage\"}"

    stage.drop {
      expression = "(/minio/health|/metrics|/favicon\\.ico)"
    }

    stage.drop {
      expression = "HTTP/[0-9.]+\\\" [23]\\d\\d"
    }

    stage.regex {
      expression = "HTTP/\\S+\\\" (?P<status>\\d{3})"
    }

    stage.labels {
      values = {
        status = "status"
      }
    }
  }

  stage.match {
    selector = "{service=\"postgres\"}"

    stage.regex {
      expression = "user=(?P<dbuser>\\S+) db=(?P<database>\\S+) app=(?P<app>[^ ]+) client=(?P<client>\\S+)"
    }

    stage.labels {
      values = {
        dbuser   = "dbuser"
        database = "database"
        app      = "app"
        client   = "client"
      }
    }

    stage.regex {
      expression = " (?P<severity>LOG|ERROR|WARNING|FATAL|PANIC|NOTICE|INFO|DEBUG\\d?)[: ]"
    }

    stage.labels {
      values = {
        severity = "severity"
      }
    }
  }

  stage.match {
    selector = "{service=\"postgres\"} |= \"pg_cron\""

    stage.static_labels {
      values = {
        component = "pg_cron"
      }
    }
  }

  stage.match {
    selector = "{service=\"postgres\"} |= \"password authentication failed\""

    stage.regex {
      expression = "password authentication failed for user \\\"(?P<dbuser>[^\\\"]+)\\\""
    }

    stage.static_labels {
      values = {
        component = "auth"
        outcome   = "failed"
      }
    }

    stage.labels {
      values = {
        dbuser = "dbuser"
      }
    }
  }

  stage.match {
    selector = "{service=\"postgres\"} |= \"connection authorized\""

    stage.static_labels {
      values = {
        component = "auth"
        outcome   = "success"
      }
    }
  }

  stage.match {
    selector = "{service=\"api\"}"

    stage.json {
      expressions = {
        level      = "level"
        component  = "component"
        event      = "event"
        msg        = "msg"
        request_id = "request_id"
        user_id    = "user_id"
      }
    }

    stage.labels {
      values = {
        level     = "level"
        component = "component"
        event     = "event"
      }
    }
    // stage.drop { expression = "\"/(health|metrics)\"" }
  }

  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

