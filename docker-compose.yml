 
services:
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_SUPERUSER}
      POSTGRES_PASSWORD: ${POSTGRES_SUPERPASS}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: ${TZ}
    command: >
      postgres
        -c wal_level=logical
        -c shared_preload_libraries=pg_stat_statements,pgaudit,pg_cron,auto_explain
        -c pgaudit.log=ddl
        -c cron.database_name=${POSTGRES_DB}
        -c max_wal_size=2GB
    volumes:
      - ${PG_DATA_HOST_DIR:-../files/volumes/db/data}:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "${POSTGRES_SUPERUSER}", "-d", "${POSTGRES_DB}", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 18
      start_period: 90s

  # db-bootstrap removed: using superuser for app connectivity

  pgcat:
    image: ${PGCAT_IMAGE:-ghcr.io/postgresml/pgcat:latest}
    container_name: pgcat
    restart: unless-stopped
    ports:
      - "6432:6432"
    depends_on:
      postgres:
        condition: service_healthy
    command: ["pgcat", "/etc/pgcat.toml"]
    volumes:
      - ${PGCAT_CONFIG_PATH:-../files/volumes/pgcat.toml}:/etc/pgcat.toml:ro
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/6432' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgrest:
    image: postgrest/postgrest:v12.2.3
    container_name: postgrest
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      pgcat:
        condition: service_started
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_SUPERUSER}:${POSTGRES_SUPERPASS}@pgcat:6432/${POSTGRES_DB}
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_DB_SCHEMAS: public,common,people,pipeline,activities,leads,docs
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_ROLE_CLAIM_KEY: .role
      PGRST_DB_PREPARED_STATEMENTS: "false"
      PGRST_OPENAPI_SERVER_PROXY_URI: https://${DOMAIN_API}
    # no Traefik labels; routing managed by Dokploy
    # healthcheck omitted: image lacks curl/wget/bash; rely on logs and deps

  hasura:
    image: hasura/graphql-engine:v2.40.0-ce
    container_name: hasura
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      pgcat:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/healthz >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_SUPERUSER}:${POSTGRES_SUPERPASS}@pgcat:6432/${POSTGRES_DB}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: web_anon
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,websocket-log,query-log
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
      HASURA_GRAPHQL_CORS_DOMAIN: ${HASURA_CORS}
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_JWT_SECRET: >
        {"type":"HS256","key":"${JWT_SECRET}","claims_namespace_path":"$","claims_format":"json"}
    # no Traefik labels; routing managed by Dokploy

  minio:
    image: ${MINIO_IMAGE:-minio/minio:latest}
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASS}
    volumes:
      - ${MINIO_DATA_HOST_DIR:-../files/volumes/storage/minio_data}:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000/minio/health/live >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    # no Traefik labels; routing managed by Dokploy

  imgproxy:
    image: darthsim/imgproxy:v3.8.0
    container_name: imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_KEY: ${IMGPROXY_KEY_HEX}
      IMGPROXY_SALT: ${IMGPROXY_SALT_HEX}
      IMGPROXY_BASE_URL: ${IMGPROXY_BASE_URL}
      IMGPROXY_ALLOWED_SOURCES: ${IMGPROXY_ALLOWED_SOURCES}
      IMGPROXY_ENABLE_WEBP_DETECTION: "true"
      IMGPROXY_MAX_SRC_RESOLUTION: "80"
    healthcheck:
      test: ["CMD", "imgproxy", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    # no Traefik labels; routing managed by Dokploy

  # One-off MinIO bootstrap: creates bucket + policy
  minio-init:
    image: ${MINIO_MC_IMAGE:-minio/mc:latest}
    container_name: minio-init
    depends_on:
      minio:
        condition: service_started
    entrypoint: ["/bin/sh","/init/minio-init.sh"]
    restart: "no"
    environment:
      MINIO_ALIAS: ${MINIO_ALIAS:-minio}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASS: ${MINIO_ROOT_PASS}
      MINIO_BUCKET: ${MINIO_BUCKET}
      S3_APP_ACCESS_KEY: ${S3_APP_ACCESS_KEY}
      S3_APP_SECRET_KEY: ${S3_APP_SECRET_KEY}
    volumes:
      - ./minio/init:/init:ro

  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost/misc/ping >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 10s
      start_period: 60s
      retries: 5
    # no Traefik labels; routing managed by Dokploy
