#!/usr/bin/env bash
set -euo pipefail

# Generate an override file with image digests for reproducibility.
# Requires Docker CLI and network access to pull/inspect images.
#
# Usage:
#   ./infra/scripts/pin-images.sh
#   docker compose -f infra/docker-compose.yml -f infra/docker-compose.pinned.yml up -d

OUT_FILE="infra/docker-compose.pinned.yml"

# Service->image mapping. Note: postgres is built locally, so skip pinning here.
declare -A IMAGES=(
  [pgcat]="ghcr.io/postgresml/pgcat:latest"
  [postgrest]="postgrest/postgrest:v12.2.3"
  [hasura]="hasura/graphql-engine:v2.40.0-ce"
  [minio]="minio/minio:RELEASE.2025-04-22T22-12-26Z"
  [imgproxy]="darthsim/imgproxy:v3.8.0"
  [minio-init]="minio/mc:latest"
  [pgadmin]="dpage/pgadmin4:8.12"
)

echo "Pulling and resolving digests..." >&2

declare -A DIGESTS
for svc in "${!IMAGES[@]}"; do
  img="${IMAGES[$svc]}"
  repo="${img%%:*}"
  docker pull "$img" >/dev/null
  # Pick a RepoDigest that matches the repo (handles multi-arch variants)
  digest=$(docker image inspect --format '{{range .RepoDigests}}{{println .}}{{end}}' "$img" \
    | grep -E "^$repo@sha256:" | head -n1)
  if [[ -z "${digest}" ]]; then
    echo "Failed to resolve digest for $img" >&2
    exit 1
  fi
  DIGESTS[$svc]="$digest"
done

{
  echo "# Generated by scripts/pin-images.sh"
  echo "services:"
  for svc in "${!DIGESTS[@]}"; do
    echo "  $svc:"
    echo "    image: ${DIGESTS[$svc]}"
  done
} > "$OUT_FILE"

echo "Wrote $OUT_FILE with pinned digests." >&2
