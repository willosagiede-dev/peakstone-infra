# --- Postgres Database ---
POSTGRES_DB=postgres
POSTGRES_SUPERUSER=postgres
POSTGRES_SUPERPASS=supersecret
TZ=UTC # or America/Denver, pg_cron follows server TZ

# Postgres custom image
POSTGRES_IMAGE=ghcr.io/willosagiede-dev/peakstone-postgres:17.6-exts

# --- Database app roles (passwords for bootstrap) ---
DB_AUTHENTICATOR_PASSWORD=replace-me-strong
HASURA_DB_PASSWORD=replace-me-strong
DB_MIGRATOR_PASSWORD=replace-me-strong

# JWT / Hasura
JWT_SECRET=replace-with-256-bit-random
HASURA_ADMIN_SECRET=hasura-admin-secret
HASURA_CORS=https://app.example.com,https://backoffice.example.com

# Local bind paths for persisted data (adjust if not using Dokploy's ../files/ structure)
PG_DATA_HOST_DIR=../files/volumes/db
MINIO_DATA_HOST_DIR=../files/volumes/storage/minio_data
PGCAT_CONFIG_PATH=../files/volumes/pgcat.toml

# pgAdmin
PGADMIN_EMAIL=admin@example.com     # Use a real email
PGADMIN_PASSWORD=pgadminsecret      # Use a strong random password

# pgCat image (pin if needed); latest uses minimal config schema
PGCAT_IMAGE=ghcr.io/postgresml/pgcat:latest

# --- MinIO Storage ---
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASS=minioadminsecret
MINIO_BUCKET=uploads
MINIO_ALIAS=minio # mc alias name (not a secret)

# Endpoint for MinIO inside the Docker network
MINIO_ENDPOINT=minio:9000
AWS_REGION=us-east-1

# S3 Access Keys
S3_APP_ACCESS_KEY=psappaccess
S3_APP_SECRET_KEY=psappsecret

# MinIO images
MINIO_IMAGE=minio/minio:latest
MINIO_MC_IMAGE=minio/mc:latest      # MinIO client (mc) image

# imgproxy (hex keys)
IMGPROXY_KEY_HEX=000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
IMGPROXY_SALT_HEX=000102030405060708090a0b0c0d0e0f
IMGPROXY_BASE_URL=https://s3.internal.example.com/
IMGPROXY_ALLOWED_SOURCES=https://s3.internal.example.com/

# --- Domains (internal HTTPS via Dokploy Traefik) ---
DOMAIN_API=api.example.com      # → PostgREST
DOMAIN_GQL=gql.example.com      # → Hasura
DOMAIN_FILES=s3.example.com     # → MinIO (S3 API)
DOMAIN_MINIO_CONSOLE=minio.example.com  # → MinIO (S3 Console)
DOMAIN_IMG=img.example.com      # → imgproxy
DOMAIN_PGADMIN=dbadmin.example.com     # → pgAdmin
DOMAIN_GRAFANA=grafana.example.com     # → Grafana

# --- Logging stack (Loki/Promtail/Grafana) ---
# Grafana bootstrap credentials
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=replace-me

# Dedicated MinIO credentials used by Loki (via AWS SDK)
LOKI_ACCESS_KEY=replace-me
LOKI_SECRET_KEY=replace-me

# Environment label for log streams
ENVIRONMENT=dev

# --- Atlas migrations ---
# Select env for atlas-migrate one-off job: dev|staging|prod
ATLAS_ENV=prod
# Connection URLs (do not commit real secrets; set in Dokploy for prod)
# Prefer a dedicated migrator role (db_migrator) for Atlas
ATLAS_DEV_URL=postgres://db_migrator:${DB_MIGRATOR_PASSWORD}@localhost:5432/${POSTGRES_DB}?sslmode=disable
ATLAS_STAGING_URL=postgres://db_migrator:${DB_MIGRATOR_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
ATLAS_PROD_URL=postgres://db_migrator:${DB_MIGRATOR_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
